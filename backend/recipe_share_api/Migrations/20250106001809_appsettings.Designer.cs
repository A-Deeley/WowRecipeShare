// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using recipe_share_api.EntityFramework;

#nullable disable

namespace recipe_share_api.Migrations
{
    [DbContext(typeof(RecipeShareDbContext))]
    [Migration("20250106001809_appsettings")]
    partial class appsettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("recipe_share_api.EntityFramework.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BnetRealmId")
                        .HasColumnType("int");

                    b.Property<int>("BnetUserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BnetRealmId");

                    b.HasIndex("BnetUserAccountId");

                    b.ToTable("BnetCharacter");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemClassId")
                        .HasColumnType("int");

                    b.Property<string>("ItemClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("int");

                    b.Property<int>("ItemSubclassId")
                        .HasColumnType("int");

                    b.Property<string>("ItemSubclassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BnetCharacterId")
                        .HasColumnType("int");

                    b.Property<long>("CurrentExp")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxExp")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SubSpecialisation")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BnetCharacterId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfessionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BnetItemId")
                        .HasColumnType("int");

                    b.Property<int?>("BnetProfessionId")
                        .HasColumnType("int");

                    b.Property<long?>("Current")
                        .HasColumnType("bigint");

                    b.Property<double?>("Delta")
                        .HasColumnType("double");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HeaderName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BnetItemId");

                    b.HasIndex("BnetProfessionId");

                    b.ToTable("ProfessionItems");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfessionItemReagent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BnetItemId")
                        .HasColumnType("int");

                    b.Property<int>("BnetProfessionItemId")
                        .HasColumnType("int");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BnetItemId");

                    b.HasIndex("BnetProfessionItemId");

                    b.ToTable("ProfessionItemReagents");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetRealm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Realms");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BattleTag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("BnetRealmId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastBnetSync")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastLogon")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PreferredAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredRealmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BnetRealmId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetUserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BnetUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BnetUserId");

                    b.ToTable("BnetUserAccount");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetCharacter", b =>
                {
                    b.HasOne("recipe_share_api.EntityFramework.BnetRealm", "BnetRealm")
                        .WithMany("BnetCharacters")
                        .HasForeignKey("BnetRealmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("recipe_share_api.EntityFramework.BnetUserAccount", "BnetUserAccount")
                        .WithMany("BnetCharacters")
                        .HasForeignKey("BnetUserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BnetRealm");

                    b.Navigation("BnetUserAccount");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfession", b =>
                {
                    b.HasOne("recipe_share_api.EntityFramework.BnetCharacter", "BnetCharacter")
                        .WithMany()
                        .HasForeignKey("BnetCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BnetCharacter");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfessionItem", b =>
                {
                    b.HasOne("recipe_share_api.EntityFramework.BnetItem", "BnetItem")
                        .WithMany()
                        .HasForeignKey("BnetItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("recipe_share_api.EntityFramework.BnetProfession", null)
                        .WithMany("BnetProfessionItems")
                        .HasForeignKey("BnetProfessionId");

                    b.Navigation("BnetItem");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfessionItemReagent", b =>
                {
                    b.HasOne("recipe_share_api.EntityFramework.BnetItem", "BnetItem")
                        .WithMany()
                        .HasForeignKey("BnetItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("recipe_share_api.EntityFramework.BnetProfessionItem", "BnetProfessionItem")
                        .WithMany("BnetProfessionItemReagents")
                        .HasForeignKey("BnetProfessionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BnetItem");

                    b.Navigation("BnetProfessionItem");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetUser", b =>
                {
                    b.HasOne("recipe_share_api.EntityFramework.BnetRealm", null)
                        .WithMany("BnetUsers")
                        .HasForeignKey("BnetRealmId");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetUserAccount", b =>
                {
                    b.HasOne("recipe_share_api.EntityFramework.BnetUser", "BnetUser")
                        .WithMany("BnetUserAccounts")
                        .HasForeignKey("BnetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BnetUser");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfession", b =>
                {
                    b.Navigation("BnetProfessionItems");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetProfessionItem", b =>
                {
                    b.Navigation("BnetProfessionItemReagents");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetRealm", b =>
                {
                    b.Navigation("BnetCharacters");

                    b.Navigation("BnetUsers");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetUser", b =>
                {
                    b.Navigation("BnetUserAccounts");
                });

            modelBuilder.Entity("recipe_share_api.EntityFramework.BnetUserAccount", b =>
                {
                    b.Navigation("BnetCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
