/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginBnetImport } from './routes/login-bnet'
import { Route as DisclaimerImport } from './routes/disclaimer'
import { Route as AddonImport } from './routes/addon'
import { Route as IndexImport } from './routes/index'
import { Route as CharacterIdImport } from './routes/character.$id'
import { Route as ProtectedcharacterRealmNameImport } from './routes/protected_character.$realm.$name'

// Create/Update Routes

const LoginBnetRoute = LoginBnetImport.update({
  id: '/login-bnet',
  path: '/login-bnet',
  getParentRoute: () => rootRoute,
} as any)

const DisclaimerRoute = DisclaimerImport.update({
  id: '/disclaimer',
  path: '/disclaimer',
  getParentRoute: () => rootRoute,
} as any)

const AddonRoute = AddonImport.update({
  id: '/addon',
  path: '/addon',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CharacterIdRoute = CharacterIdImport.update({
  id: '/character/$id',
  path: '/character/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedcharacterRealmNameRoute =
  ProtectedcharacterRealmNameImport.update({
    id: '/protected_character/$realm/$name',
    path: '/protected_character/$realm/$name',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/addon': {
      id: '/addon'
      path: '/addon'
      fullPath: '/addon'
      preLoaderRoute: typeof AddonImport
      parentRoute: typeof rootRoute
    }
    '/disclaimer': {
      id: '/disclaimer'
      path: '/disclaimer'
      fullPath: '/disclaimer'
      preLoaderRoute: typeof DisclaimerImport
      parentRoute: typeof rootRoute
    }
    '/login-bnet': {
      id: '/login-bnet'
      path: '/login-bnet'
      fullPath: '/login-bnet'
      preLoaderRoute: typeof LoginBnetImport
      parentRoute: typeof rootRoute
    }
    '/character/$id': {
      id: '/character/$id'
      path: '/character/$id'
      fullPath: '/character/$id'
      preLoaderRoute: typeof CharacterIdImport
      parentRoute: typeof rootRoute
    }
    '/protected_character/$realm/$name': {
      id: '/protected_character/$realm/$name'
      path: '/protected_character/$realm/$name'
      fullPath: '/protected_character/$realm/$name'
      preLoaderRoute: typeof ProtectedcharacterRealmNameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/addon': typeof AddonRoute
  '/disclaimer': typeof DisclaimerRoute
  '/login-bnet': typeof LoginBnetRoute
  '/character/$id': typeof CharacterIdRoute
  '/protected_character/$realm/$name': typeof ProtectedcharacterRealmNameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/addon': typeof AddonRoute
  '/disclaimer': typeof DisclaimerRoute
  '/login-bnet': typeof LoginBnetRoute
  '/character/$id': typeof CharacterIdRoute
  '/protected_character/$realm/$name': typeof ProtectedcharacterRealmNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/addon': typeof AddonRoute
  '/disclaimer': typeof DisclaimerRoute
  '/login-bnet': typeof LoginBnetRoute
  '/character/$id': typeof CharacterIdRoute
  '/protected_character/$realm/$name': typeof ProtectedcharacterRealmNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/addon'
    | '/disclaimer'
    | '/login-bnet'
    | '/character/$id'
    | '/protected_character/$realm/$name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/addon'
    | '/disclaimer'
    | '/login-bnet'
    | '/character/$id'
    | '/protected_character/$realm/$name'
  id:
    | '__root__'
    | '/'
    | '/addon'
    | '/disclaimer'
    | '/login-bnet'
    | '/character/$id'
    | '/protected_character/$realm/$name'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddonRoute: typeof AddonRoute
  DisclaimerRoute: typeof DisclaimerRoute
  LoginBnetRoute: typeof LoginBnetRoute
  CharacterIdRoute: typeof CharacterIdRoute
  ProtectedcharacterRealmNameRoute: typeof ProtectedcharacterRealmNameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddonRoute: AddonRoute,
  DisclaimerRoute: DisclaimerRoute,
  LoginBnetRoute: LoginBnetRoute,
  CharacterIdRoute: CharacterIdRoute,
  ProtectedcharacterRealmNameRoute: ProtectedcharacterRealmNameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/addon",
        "/disclaimer",
        "/login-bnet",
        "/character/$id",
        "/protected_character/$realm/$name"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/addon": {
      "filePath": "addon.tsx"
    },
    "/disclaimer": {
      "filePath": "disclaimer.tsx"
    },
    "/login-bnet": {
      "filePath": "login-bnet.tsx"
    },
    "/character/$id": {
      "filePath": "character.$id.tsx"
    },
    "/protected_character/$realm/$name": {
      "filePath": "protected_character.$realm.$name.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
